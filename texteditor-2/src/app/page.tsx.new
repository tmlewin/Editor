"use client";

import { useState, useEffect, useRef } from "react";
import { useTheme } from "next-themes";
import { DocumentService } from "@/services/documentService";
import { Document } from "@/types/document";
import { mockDocuments } from "@/data/mockDocuments";
import { TagsService } from "@/services/tagsService";
import DocumentSidebar from "@/components/sidebar/DocumentSidebar";
import Editor from "@/components/editor/Editor";

export default function Home() {
  const [content, setContent] = useState<string>("");
  const { theme, setTheme } = useTheme();
  const [documentTitle, setDocumentTitle] = useState<string>("Untitled Document");
  const [mounted, setMounted] = useState(false);
  const [isFullScreen, setIsFullScreen] = useState(false);
  const [documentsVisible, setDocumentsVisible] = useState(true);
  const [documents, setDocuments] = useState<Document[]>([]);
  const [currentDocument, setCurrentDocument] = useState<Document | null>(null);
  const [autoSave, setAutoSave] = useState(true);
  const [autoSaveInterval, setAutoSaveInterval] = useState(30); // seconds
  const [documentToDelete, setDocumentToDelete] = useState<Document | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [syncStatus, setSyncStatus] = useState<'synced' | 'syncing' | 'offline'>('synced');
  const autoSaveTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Toggle full screen mode
  const toggleFullScreen = () => {
    if (!document.fullscreenElement) {
      document.documentElement.requestFullscreen().catch(err => {
        console.error(`Error attempting to enable full-screen mode: ${err.message}`);
      });
    } else {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      }
    }
    setIsFullScreen(!isFullScreen);
  };

  // Ensure we only render theme-dependent UI after hydration
  useEffect(() => {
    setMounted(true);

    // Listen for fullscreen changes
    const handleFullScreenChange = () => {
      setIsFullScreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullScreenChange);

    return () => {
      document.removeEventListener('fullscreenchange', handleFullScreenChange);
    };
  }, []);

  // Create a new document
  const createNewDocument = async () => {
    // Save any existing content before creating a new document
    if (currentDocument && content) {
      await saveDocument();
    }

    const newDocument: Document = {
      id: Date.now(),
      title: "Untitled Document",
      content: "<p>Start writing here...</p>",
      tags: [],
      createdAt: new Date(),
      modifiedAt: new Date()
    };

    setCurrentDocument(newDocument);
    setDocumentTitle(newDocument.title);
    setContent(newDocument.content);

    // Immediately save the new document
    const updatedDocuments = [...documents, newDocument];
    setDocuments(updatedDocuments);

    try {
      await DocumentService.saveDocument(newDocument, updatedDocuments);
      setSyncStatus('synced');
    } catch (error) {
      console.error("Error creating new document:", error);
      setSyncStatus('offline');
    }

    return newDocument;
  };

  // Load an existing document
  const loadDocument = async (doc: Document) => {
    // First, save any changes to the current document before switching
    if (currentDocument && content) {
      await saveDocument();
    }

    // Then switch to the new document
    setCurrentDocument(doc);
    setDocumentTitle(doc.title);
    setContent(doc.content);
  };

  // Load documents on initial render
  useEffect(() => {
    const loadInitialDocuments = async () => {
      setIsLoading(true);
      try {
        // Try to load documents from Firestore first, with fallback to localStorage
        const loadedDocuments = await DocumentService.loadDocuments();

        if (loadedDocuments && loadedDocuments.length > 0) {
          setDocuments(loadedDocuments);
          setSyncStatus('synced');
        } else {
          // If no documents found, use mock documents as initial data
          setDocuments(mockDocuments);
          // Save mock documents to both storages
          await DocumentService.saveDocuments(mockDocuments);
        }
      } catch (error) {
        console.error('Error loading documents:', error);
        // If loading from Firestore fails, try localStorage
        const localDocs = DocumentService.loadFromLocalStorage();
        if (localDocs) {
          setDocuments(localDocs);
          setSyncStatus('offline');
        } else {
          // If all else fails, use mock documents
          setDocuments(mockDocuments);
        }
      } finally {
        setIsLoading(false);
      }
    };

    loadInitialDocuments();
  }, []);

  // Save the current document
  const saveDocument = async () => {
    if (!content) return;

    // Show auto-save indicator
    setSyncStatus('syncing');

    try {
      if (currentDocument) {
        // Update existing document
        const updatedDocument = {
          ...currentDocument,
          title: documentTitle,
          content: content,
          modifiedAt: new Date()
        };

        // Replace the existing document in the list
        const updatedDocuments = documents.map(doc =>
          doc.id === updatedDocument.id ? updatedDocument : doc
        );

        setDocuments(updatedDocuments);
        setCurrentDocument(updatedDocument);

        // Save to both local storage and Firestore
        await DocumentService.saveDocument(updatedDocument, updatedDocuments);
        console.log("Updated existing document:", updatedDocument.title);
        setSyncStatus('synced');
      } else {
        // Only create a new document if one doesn't exist yet
        const newDocument: Document = {
          id: Date.now(),
          title: documentTitle || "Untitled Document",
          content: content,
          tags: [],
          createdAt: new Date(),
          modifiedAt: new Date()
        };

        const updatedDocuments = [...documents, newDocument];
        setDocuments(updatedDocuments);
        setCurrentDocument(newDocument);

        // Save to both local storage and Firestore
        await DocumentService.saveDocument(newDocument, updatedDocuments);
        console.log("Created new document:", newDocument.title);
        setSyncStatus('synced');
      }
    } catch (error) {
      console.error("Error saving document:", error);
      setSyncStatus('offline');
      // Even if Firestore save fails, we still have the document in local storage
    }
  };

  // Implement keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Only process if ctrl or cmd key is pressed
      if (e.ctrlKey || e.metaKey) {
        switch (e.key.toLowerCase()) {
          case 's':
            e.preventDefault();
            saveDocument();
            break;
          default:
            break;
        }
      }
    };

    // Add event listener
    document.addEventListener('keydown', handleKeyDown);

    // Clean up
    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, []);

  // Auto-save functionality
  useEffect(() => {
    if (autoSave) {
      // Clear any existing timer
      if (autoSaveTimerRef.current) {
        clearInterval(autoSaveTimerRef.current);
      }

      // Set up new timer
      autoSaveTimerRef.current = setInterval(() => {
        // Only save if we have content, and avoid creating new documents
        if (content) {
          console.log("Auto-save triggered for document: ",
            currentDocument?.title || "New document");

          // Always use the existing saveDocument function
          saveDocument();
        }
      }, autoSaveInterval * 1000);
    } else if (autoSaveTimerRef.current) {
      clearInterval(autoSaveTimerRef.current);
    }

    return () => {
      if (autoSaveTimerRef.current) {
        clearInterval(autoSaveTimerRef.current);
      }
    };
  }, [autoSave, autoSaveInterval, content, currentDocument]);

  // Delete a document
  const handleDeleteDocument = async (doc: Document) => {
    try {
      setSyncStatus('syncing');
      const updatedDocuments = await DocumentService.deleteDocument(doc.id, documents);
      setDocuments(updatedDocuments);
      setDocumentToDelete(null);

      // If we're deleting the current document, clear the editor
      if (currentDocument && currentDocument.id === doc.id) {
        setCurrentDocument(null);
        setDocumentTitle("Untitled Document");
        setContent("");
      }

      setSyncStatus('synced');
    } catch (error) {
      console.error("Error deleting document:", error);
      setSyncStatus('offline');

      // Even if Firestore delete fails, we still update the local state
      const updatedDocuments = documents.filter(d => d.id !== doc.id);
      setDocuments(updatedDocuments);
      setDocumentToDelete(null);
    }
  };

  // Add export functions
  const exportAsPDF = async () => {
    // Create loading state
    const prevContent = content;
    setContent("<p>Preparing PDF export...</p>");

    try {
      // We'll use the browser's built-in print-to-PDF capability
      // Create a new window with styled content
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        throw new Error('Unable to open print window. Please check your popup blocker settings.');
      }

      // Write a complete HTML document to the new window
      printWindow.document.write(`
        <!DOCTYPE html>
        <html>
        <head>
          <title>${documentTitle}</title>
          <meta charset="utf-8">
          <style>
            body {
              font-family: Arial, sans-serif;
              line-height: 1.5;
              margin: 40px;
              color: #000;
              background: #fff;
            }
            h1, h2, h3, h4, h5, h6 {
              margin-top: 1em;
              margin-bottom: 0.5em;
            }
            p {
              margin-bottom: 1em;
            }
            ul, ol {
              margin-bottom: 1em;
              padding-left: 2em;
            }
            li {
              margin-bottom: 0.5em;
            }
            .document-title {
              font-size: 24px;
              font-weight: bold;
              margin-bottom: 20px;
              text-align: center;
            }
            .document-content {
              max-width: 800px;
              margin: 0 auto;
            }
            @media print {
              body {
                margin: 0;
                padding: 1cm;
              }
              .print-instructions {
                display: none;
              }
            }
          </style>
        </head>
        <body>
          <div class="print-instructions" style="background: #f5f5f5; padding: 10px; margin-bottom: 20px; border: 1px solid #ddd; font-size: 14px;">
            <p><strong>Instructions:</strong> To save as PDF, use your browser's print function (Ctrl+P or Cmd+P) and select "Save as PDF" as the destination.</p>
          </div>
          <div class="document-content">
            <div class="document-title">${documentTitle}</div>
            ${prevContent}
          </div>
          <script>
            // Automatically open the print dialog after the content loads
            window.onload = function() {
              setTimeout(function() {
                window.print();
              }, 500);
            };
          </script>
        </body>
        </html>
      `);

      // Close the document for writing
      printWindow.document.close();

      // Restore original content
      setContent(prevContent);

    } catch (error) {
      console.error('Error preparing document for PDF export:', error);
      setContent(prevContent);
      alert(`PDF export failed: ${error.message || 'Unknown error'}`);
    }
  };

  const exportAsMarkdown = async () => {
    try {
      // Dynamic import of turndown
      const TurndownService = (await import('turndown')).default;
      const turndown = new TurndownService();

      // Convert HTML to Markdown
      const markdown = turndown.turndown(content);

      // Create and download file
      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${documentTitle}.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error exporting to Markdown:', error);
      alert(`Failed to export as Markdown: ${error.message || 'Unknown error'}`);
    }
  };

  const exportAsHTML = () => {
    // Create a formatted HTML document
    const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>${documentTitle}</title>
    <style>
      body { font-family: system-ui, -apple-system, sans-serif; }
      .content { max-width: 800px; margin: 2rem auto; padding: 0 1rem; }
    </style>
</head>
<body>
    <div class="content">
      ${content}
    </div>
</body>
</html>`;

    // Create and download file
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${documentTitle}.html`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  // Sync documents with Firestore
  const syncWithFirestore = async () => {
    if (syncStatus === 'syncing') return;

    setSyncStatus('syncing');
    try {
      // First save any current changes
      if (currentDocument && content) {
        await saveDocument();
      }

      // Then sync all documents
      const syncedDocuments = await DocumentService.syncWithFirestore(documents);
      setDocuments(syncedDocuments);
      setSyncStatus('synced');

      // If we have a current document, make sure it's updated with the synced version
      if (currentDocument) {
        const updatedCurrentDoc = syncedDocuments.find(doc => doc.id === currentDocument.id);
        if (updatedCurrentDoc) {
          setCurrentDocument(updatedCurrentDoc);
          setDocumentTitle(updatedCurrentDoc.title);
          setContent(updatedCurrentDoc.content);
        }
      }
    } catch (error) {
      console.error("Error syncing with Firestore:", error);
      setSyncStatus('offline');
    }
  };

  // Update document tags
  const updateDocumentTags = async (documentId: number, oldTags: string[], newTags: string[]) => {
    setSyncStatus('syncing');
    try {
      // Find the document to update
      const docToUpdate = documents.find(doc => doc.id === documentId);
      if (!docToUpdate) {
        throw new Error(`Document with ID ${documentId} not found`);
      }

      // Update the document with new tags
      const updatedDoc = {
        ...docToUpdate,
        tags: newTags,
        modifiedAt: new Date()
      };

      // Update the document in the local state
      const updatedDocuments = documents.map(doc =>
        doc.id === documentId ? updatedDoc : doc
      );

      setDocuments(updatedDocuments);

      // If this is the current document, update it
      if (currentDocument && currentDocument.id === documentId) {
        setCurrentDocument(updatedDoc);
      }

      // Update tags in Firestore
      await TagsService.updateDocumentTags(documentId, oldTags, newTags);

      // Save the updated document
      await DocumentService.saveDocument(updatedDoc, updatedDocuments);

      setSyncStatus('synced');
    } catch (error) {
      console.error("Error updating document tags:", error);
      setSyncStatus('offline');
    }
  };

  if (!mounted) {
    return null;
  }

  return (
    <div className="flex h-screen bg-background text-foreground">
      {/* Document Management Panel */}
      {documentsVisible && (
        <DocumentSidebar
          documents={documents}
          createNewDocument={createNewDocument}
          loadDocument={loadDocument}
          handleDeleteDocument={handleDeleteDocument}
          updateDocumentTags={updateDocumentTags}
          isLoading={isLoading}
        />
      )}

      <Editor
        content={content}
        setContent={setContent}
        documentTitle={documentTitle}
        setDocumentTitle={setDocumentTitle}
        documentsVisible={documentsVisible}
        setDocumentsVisible={setDocumentsVisible}
        theme={theme}
        setTheme={setTheme}
        isFullScreen={isFullScreen}
        toggleFullScreen={toggleFullScreen}
        saveDocument={saveDocument}
        syncWithFirestore={syncWithFirestore}
        syncStatus={syncStatus}
        autoSave={autoSave}
        setAutoSave={setAutoSave}
        autoSaveInterval={autoSaveInterval}
        setAutoSaveInterval={setAutoSaveInterval}
        exportAsPDF={exportAsPDF}
        exportAsMarkdown={exportAsMarkdown}
        exportAsHTML={exportAsHTML}
        currentDocument={currentDocument}
      />
    </div>
  );
}